diff --git a/.dir-locals.el:Zone.Identifier b/.dir-locals.el:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/.editorconfig:Zone.Identifier b/.editorconfig:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/.gdbinit.tmpl-riscv b/.gdbinit.tmpl-riscv
index a2bfde3..83ce1bd 100644
--- a/.gdbinit.tmpl-riscv
+++ b/.gdbinit.tmpl-riscv
@@ -4,3 +4,4 @@ target remote 127.0.0.1:1234
 symbol-file kernel/kernel
 set disassemble-next-line auto
 set riscv use-compressed-breakpoints yes
+set auto-load safe-path /
\ No newline at end of file
diff --git a/.gdbinit.tmpl-riscv:Zone.Identifier b/.gdbinit.tmpl-riscv:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/.gitignore:Zone.Identifier b/.gitignore:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..f3632f8
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,6 @@
+{
+    "files.associations": {
+        "*.d": "c",
+        "stat.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/.vscode/settings.json:Zone.Identifier b/.vscode/settings.json:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/LICENSE:Zone.Identifier b/LICENSE:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/Makefile b/Makefile
index 328f9c6..6d5ffa1 100644
--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,8 @@
 K=kernel
 U=user
+ifndef SCHEDFLAG #ass1-task4
+SCHEDFLAG=DEFAULT
+endif
 
 OBJS = \
   $K/entry.o \
@@ -50,6 +53,10 @@ endif
 
 QEMU = qemu-system-riscv64
 
+# ifndef SCHEDFLAG
+# SCHEDFLAG := DEFAULT
+# endif
+
 CC = $(TOOLPREFIX)gcc
 AS = $(TOOLPREFIX)gas
 LD = $(TOOLPREFIX)ld
@@ -62,6 +69,7 @@ CFLAGS += -mcmodel=medany
 CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
 CFLAGS += -I.
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+CFLAGS += -D $(SCHEDFLAG) # ass1-task4
 
 # Disable PIE when possible (for Ubuntu 16.10 toolchain)
 ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]no-pie'),)
@@ -115,7 +123,11 @@ mkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.h
 # http://www.gnu.org/software/make/manual/html_node/Chained-Rules.html
 .PRECIOUS: %.o
 
+_path:
+	echo "/:/bin/:" > _path 
+
 UPROGS=\
+	_path\
 	$U/_cat\
 	$U/_echo\
 	$U/_forktest\
@@ -132,7 +144,10 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
+	$U/_tests\
+	$U/_test\
+	$U/_trace\
+	
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
 
diff --git a/Makefile:Zone.Identifier b/Makefile:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/README:Zone.Identifier b/README:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/fs.img:Zone.Identifier b/fs.img:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/ass1_taskt.txt b/kernel/ass1_taskt.txt
new file mode 100644
index 0000000..fa60b85
--- /dev/null
+++ b/kernel/ass1_taskt.txt
@@ -0,0 +1,10 @@
+You first need to understand the current (e.g., existing) scheduling policy. Locate it in the
+code and try to answer the following questions: 
+
+1) which process the policy chooses to run?
+
+2) what happens when a process returns from I/O?
+ 
+3) what happens when a new process is created?
+
+4) and when/how often scheduling takes place?
diff --git a/kernel/ass1_taskt.txt:Zone.Identifier b/kernel/ass1_taskt.txt:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/bio.c:Zone.Identifier b/kernel/bio.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/bio.d:Zone.Identifier b/kernel/bio.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/bio.o:Zone.Identifier b/kernel/bio.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/buf.h:Zone.Identifier b/kernel/buf.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/console.c:Zone.Identifier b/kernel/console.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/console.d:Zone.Identifier b/kernel/console.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/console.o:Zone.Identifier b/kernel/console.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/date.h:Zone.Identifier b/kernel/date.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/defs.h b/kernel/defs.h
index 41098f4..a6fd810 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -95,6 +95,11 @@ struct cpu*     getmycpu(void);
 struct proc*    myproc();
 void            procinit(void);
 void            scheduler(void) __attribute__((noreturn));
+void            scheduler_DEFAULT(void) __attribute__((noreturn));
+void            scheduler_FCFS(void) __attribute__((noreturn));
+void            scheduler_SRT(void) __attribute__((noreturn));
+void            scheduler_CFSD(void) __attribute__((noreturn));
+int             getRuntimeRatio(struct proc* p);
 void            sched(void);
 void            setproc(struct proc*);
 void            sleep(void*, struct spinlock*);
@@ -105,6 +110,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             wait_stat(uint64 status , uint64 performence);
+int             set_priority(int priority);
+int            trace(int, int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/defs.h:Zone.Identifier b/kernel/defs.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/elf.h:Zone.Identifier b/kernel/elf.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/entry.S:Zone.Identifier b/kernel/entry.S:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/entry.o:Zone.Identifier b/kernel/entry.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/exec.c:Zone.Identifier b/kernel/exec.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/exec.d:Zone.Identifier b/kernel/exec.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/exec.o:Zone.Identifier b/kernel/exec.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/fcntl.h:Zone.Identifier b/kernel/fcntl.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/file.c:Zone.Identifier b/kernel/file.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/file.d:Zone.Identifier b/kernel/file.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/file.h:Zone.Identifier b/kernel/file.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/file.o:Zone.Identifier b/kernel/file.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/fs.c:Zone.Identifier b/kernel/fs.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/fs.d:Zone.Identifier b/kernel/fs.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/fs.h:Zone.Identifier b/kernel/fs.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/fs.o:Zone.Identifier b/kernel/fs.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/kalloc.c:Zone.Identifier b/kernel/kalloc.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/kalloc.d:Zone.Identifier b/kernel/kalloc.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/kalloc.o:Zone.Identifier b/kernel/kalloc.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/kernel.asm:Zone.Identifier b/kernel/kernel.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/kernel.ld:Zone.Identifier b/kernel/kernel.ld:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/kernel.sym:Zone.Identifier b/kernel/kernel.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/kernel:Zone.Identifier b/kernel/kernel:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/kernelvec.S:Zone.Identifier b/kernel/kernelvec.S:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/kernelvec.o:Zone.Identifier b/kernel/kernelvec.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/log.c:Zone.Identifier b/kernel/log.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/log.d:Zone.Identifier b/kernel/log.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/log.o:Zone.Identifier b/kernel/log.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/main.c:Zone.Identifier b/kernel/main.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/main.d:Zone.Identifier b/kernel/main.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/main.o:Zone.Identifier b/kernel/main.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/memlayout.h:Zone.Identifier b/kernel/memlayout.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/param.h b/kernel/param.h
index b5fdcb2..eebe3d2 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,5 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       1000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define QUNTOM       5     // num of ticks to change procces 
+#define ALPHA       50      
diff --git a/kernel/param.h:Zone.Identifier b/kernel/param.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/path b/kernel/path
new file mode 100644
index 0000000..027c827
--- /dev/null
+++ b/kernel/path
@@ -0,0 +1 @@
+/:/user/:
\ No newline at end of file
diff --git a/kernel/path:Zone.Identifier b/kernel/path:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/pipe.c:Zone.Identifier b/kernel/pipe.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/pipe.d:Zone.Identifier b/kernel/pipe.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/pipe.o:Zone.Identifier b/kernel/pipe.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/plic.c:Zone.Identifier b/kernel/plic.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/plic.d:Zone.Identifier b/kernel/plic.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/plic.o:Zone.Identifier b/kernel/plic.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/printf.c:Zone.Identifier b/kernel/printf.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/printf.d:Zone.Identifier b/kernel/printf.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/printf.o:Zone.Identifier b/kernel/printf.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..623e51e 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -15,6 +15,10 @@ struct proc *initproc;
 int nextpid = 1;
 struct spinlock pid_lock;
 
+//task4 cupat cholim 
+int nextturn = 1;
+struct spinlock turn_lock;
+
 extern void forkret(void);
 static void freeproc(struct proc *p);
 
@@ -29,38 +33,38 @@ struct spinlock wait_lock;
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
-void
-proc_mapstacks(pagetable_t kpgtbl) {
+void proc_mapstacks(pagetable_t kpgtbl)
+{
   struct proc *p;
-  
-  for(p = proc; p < &proc[NPROC]; p++) {
+
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
     char *pa = kalloc();
-    if(pa == 0)
+    if (pa == 0)
       panic("kalloc");
-    uint64 va = KSTACK((int) (p - proc));
+    uint64 va = KSTACK((int)(p - proc));
     kvmmap(kpgtbl, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
   }
 }
 
 // initialize the proc table at boot time.
-void
-procinit(void)
+void procinit(void)
 {
   struct proc *p;
-  
+
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
-  for(p = proc; p < &proc[NPROC]; p++) {
-      initlock(&p->lock, "proc");
-      p->kstack = KSTACK((int) (p - proc));
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    initlock(&p->lock, "proc");
+    p->kstack = KSTACK((int)(p - proc));
   }
 }
 
 // Must be called with interrupts disabled,
 // to prevent race with process being moved
 // to a different CPU.
-int
-cpuid()
+int cpuid()
 {
   int id = r_tp();
   return id;
@@ -68,16 +72,18 @@ cpuid()
 
 // Return this CPU's cpu struct.
 // Interrupts must be disabled.
-struct cpu*
-mycpu(void) {
+struct cpu *
+mycpu(void)
+{
   int id = cpuid();
   struct cpu *c = &cpus[id];
   return c;
 }
 
 // Return the current struct proc *, or zero if none.
-struct proc*
-myproc(void) {
+struct proc *
+myproc(void)
+{
   push_off();
   struct cpu *c = mycpu();
   struct proc *p = c->proc;
@@ -85,10 +91,10 @@ myproc(void) {
   return p;
 }
 
-int
-allocpid() {
+int allocpid()
+{
   int pid;
-  
+
   acquire(&pid_lock);
   pid = nextpid;
   nextpid = nextpid + 1;
@@ -97,31 +103,56 @@ allocpid() {
   return pid;
 }
 
+// task 4
+int allocturn()
+{
+  int turn;
+
+  acquire(&turn_lock);
+  turn = nextturn;
+  nextturn = nextturn + 1;
+  release(&turn_lock);
+
+  return turn;
+}
+
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
 // If there are no free procs, or a memory allocation fails, return 0.
-static struct proc*
+static struct proc *
 allocproc(void)
 {
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++) {
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
     acquire(&p->lock);
-    if(p->state == UNUSED) {
+    if (p->state == UNUSED)
+    {
       goto found;
-    } else {
+    }
+    else
+    {
       release(&p->lock);
     }
   }
   return 0;
 
 found:
+  p->perf.ctime = ticks; //ass1-task3
+  p->perf.ttime = -1;   //ass1-task3
+  p->priority = NORMAL; //ass1-task4.4
+  p->perf.ctime = ticks;
+  p->perf.avrage_bursttime = QUNTOM * 100;
+  p->perf.ttime = -1;
   p->pid = allocpid();
   p->state = USED;
-
+  p->turn = allocturn();
+  p->trace_mask = 0;
   // Allocate a trapframe page.
-  if((p->trapframe = (struct trapframe *)kalloc()) == 0){
+  if ((p->trapframe = (struct trapframe *)kalloc()) == 0)
+  {
     freeproc(p);
     release(&p->lock);
     return 0;
@@ -129,7 +160,8 @@ found:
 
   // An empty user page table.
   p->pagetable = proc_pagetable(p);
-  if(p->pagetable == 0){
+  if (p->pagetable == 0)
+  {
     freeproc(p);
     release(&p->lock);
     return 0;
@@ -141,6 +173,9 @@ found:
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
 
+  //ass1-task4
+  p->ticks_counter = 0;
+
   return p;
 }
 
@@ -150,10 +185,10 @@ found:
 static void
 freeproc(struct proc *p)
 {
-  if(p->trapframe)
-    kfree((void*)p->trapframe);
+  if (p->trapframe)
+    kfree((void *)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
+  if (p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
   p->sz = 0;
@@ -175,22 +210,24 @@ proc_pagetable(struct proc *p)
 
   // An empty page table.
   pagetable = uvmcreate();
-  if(pagetable == 0)
+  if (pagetable == 0)
     return 0;
 
   // map the trampoline code (for system call return)
   // at the highest user virtual address.
   // only the supervisor uses it, on the way
   // to/from user space, so not PTE_U.
-  if(mappages(pagetable, TRAMPOLINE, PGSIZE,
-              (uint64)trampoline, PTE_R | PTE_X) < 0){
+  if (mappages(pagetable, TRAMPOLINE, PGSIZE,
+               (uint64)trampoline, PTE_R | PTE_X) < 0)
+  {
     uvmfree(pagetable, 0);
     return 0;
   }
 
   // map the trapframe just below TRAMPOLINE, for trampoline.S.
-  if(mappages(pagetable, TRAPFRAME, PGSIZE,
-              (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
+  if (mappages(pagetable, TRAPFRAME, PGSIZE,
+               (uint64)(p->trapframe), PTE_R | PTE_W) < 0)
+  {
     uvmunmap(pagetable, TRAMPOLINE, 1, 0);
     uvmfree(pagetable, 0);
     return 0;
@@ -201,8 +238,7 @@ proc_pagetable(struct proc *p)
 
 // Free a process's page table, and free the
 // physical memory it refers to.
-void
-proc_freepagetable(pagetable_t pagetable, uint64 sz)
+void proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
@@ -212,55 +248,57 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
 // a user program that calls exec("/init")
 // od -t xC initcode
 uchar initcode[] = {
-  0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02,
-  0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x35, 0x02,
-  0x93, 0x08, 0x70, 0x00, 0x73, 0x00, 0x00, 0x00,
-  0x93, 0x08, 0x20, 0x00, 0x73, 0x00, 0x00, 0x00,
-  0xef, 0xf0, 0x9f, 0xff, 0x2f, 0x69, 0x6e, 0x69,
-  0x74, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
-  0x00, 0x00, 0x00, 0x00
-};
+    0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02,
+    0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x35, 0x02,
+    0x93, 0x08, 0x70, 0x00, 0x73, 0x00, 0x00, 0x00,
+    0x93, 0x08, 0x20, 0x00, 0x73, 0x00, 0x00, 0x00,
+    0xef, 0xf0, 0x9f, 0xff, 0x2f, 0x69, 0x6e, 0x69,
+    0x74, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00};
 
 // Set up first user process.
-void
-userinit(void)
+void userinit(void)
 {
   struct proc *p;
 
   p = allocproc();
   initproc = p;
-  
+
   // allocate one user page and copy init's instructions
   // and data into it.
   uvminit(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
 
   // prepare for the very first "return" from kernel to user.
-  p->trapframe->epc = 0;      // user program counter
-  p->trapframe->sp = PGSIZE;  // user stack pointer
+  p->trapframe->epc = 0;     // user program counter
+  p->trapframe->sp = PGSIZE; // user stack pointer
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
 
   p->state = RUNNABLE;
 
+
   release(&p->lock);
 }
 
 // Grow or shrink user memory by n bytes.
 // Return 0 on success, -1 on failure.
-int
-growproc(int n)
+int growproc(int n)
 {
   uint sz;
   struct proc *p = myproc();
 
   sz = p->sz;
-  if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
+  if (n > 0)
+  {
+    if ((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0)
+    {
       return -1;
     }
-  } else if(n < 0){
+  }
+  else if (n < 0)
+  {
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
   p->sz = sz;
@@ -269,35 +307,39 @@ growproc(int n)
 
 // Create a new process, copying the parent.
 // Sets up child kernel stack to return as if from fork() system call.
-int
-fork(void)
+int fork(void)
 {
   int i, pid;
   struct proc *np;
   struct proc *p = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if ((np = allocproc()) == 0)
+  {
     return -1;
   }
 
   // Copy user memory from parent to child.
-  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
+  if (uvmcopy(p->pagetable, np->pagetable, p->sz) < 0)
+  {
     freeproc(np);
     release(&np->lock);
     return -1;
   }
   np->sz = p->sz;
-
+  //ass1-task2
+  np->trace_mask = p->trace_mask;
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
   // Cause fork to return 0 in the child.
   np->trapframe->a0 = 0;
-
+  
+  //ass1-task4.4
+  np->priority = p->priority;
   // increment reference counts on open file descriptors.
-  for(i = 0; i < NOFILE; i++)
-    if(p->ofile[i])
+  for (i = 0; i < NOFILE; i++)
+    if (p->ofile[i])
       np->ofile[i] = filedup(p->ofile[i]);
   np->cwd = idup(p->cwd);
 
@@ -313,6 +355,7 @@ fork(void)
 
   acquire(&np->lock);
   np->state = RUNNABLE;
+  
   release(&np->lock);
 
   return pid;
@@ -320,13 +363,14 @@ fork(void)
 
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
-void
-reparent(struct proc *p)
+void reparent(struct proc *p)
 {
   struct proc *pp;
 
-  for(pp = proc; pp < &proc[NPROC]; pp++){
-    if(pp->parent == p){
+  for (pp = proc; pp < &proc[NPROC]; pp++)
+  {
+    if (pp->parent == p)
+    {
       pp->parent = initproc;
       wakeup(initproc);
     }
@@ -336,17 +380,18 @@ reparent(struct proc *p)
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait().
-void
-exit(int status)
+void exit(int status)
 {
   struct proc *p = myproc();
 
-  if(p == initproc)
+  if (p == initproc)
     panic("init exiting");
 
   // Close all open files.
-  for(int fd = 0; fd < NOFILE; fd++){
-    if(p->ofile[fd]){
+  for (int fd = 0; fd < NOFILE; fd++)
+  {
+    if (p->ofile[fd])
+    {
       struct file *f = p->ofile[fd];
       fileclose(f);
       p->ofile[fd] = 0;
@@ -365,11 +410,12 @@ exit(int status)
 
   // Parent might be sleeping in wait().
   wakeup(p->parent);
-  
+
   acquire(&p->lock);
 
   p->xstate = status;
   p->state = ZOMBIE;
+  p->perf.ttime = ticks;
 
   release(&wait_lock);
 
@@ -380,29 +426,34 @@ exit(int status)
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
-int
-wait(uint64 addr)
+int wait(uint64 addr)
 {
+  
   struct proc *np;
   int havekids, pid;
   struct proc *p = myproc();
 
   acquire(&wait_lock);
 
-  for(;;){
+  for (;;)
+  {
     // Scan through table looking for exited children.
     havekids = 0;
-    for(np = proc; np < &proc[NPROC]; np++){
-      if(np->parent == p){
+    for (np = proc; np < &proc[NPROC]; np++)
+    {
+      if (np->parent == p)
+      {
         // make sure the child isn't still in exit() or swtch().
         acquire(&np->lock);
 
         havekids = 1;
-        if(np->state == ZOMBIE){
+        if (np->state == ZOMBIE)
+        {
           // Found one.
           pid = np->pid;
-          if(addr != 0 && copyout(p->pagetable, addr, (char *)&np->xstate,
-                                  sizeof(np->xstate)) < 0) {
+          if (addr != 0 && copyout(p->pagetable, addr, (char *)&np->xstate,
+                                   sizeof(np->xstate)) < 0)
+          {
             release(&np->lock);
             release(&wait_lock);
             return -1;
@@ -417,13 +468,14 @@ wait(uint64 addr)
     }
 
     // No point waiting if we don't have any children.
-    if(!havekids || p->killed){
+    if (!havekids || p->killed)
+    {
       release(&wait_lock);
       return -1;
     }
-    
+
     // Wait for a child to exit.
-    sleep(p, &wait_lock);  //DOC: wait-sleep
+    sleep(p, &wait_lock); //DOC: wait-sleep
   }
 }
 
@@ -434,27 +486,33 @@ wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
-void
-scheduler(void)
+
+void scheduler_DEFAULT(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
-  
+
   c->proc = 0;
-  for(;;){
+  for (;;)
+  {
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
-    for(p = proc; p < &proc[NPROC]; p++) {
+    for (p = proc; p < &proc[NPROC]; p++)
+    {
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
+      if (p->state == RUNNABLE)
+      {
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
         p->state = RUNNING;
         c->proc = p;
-        swtch(&c->context, &p->context);
-
+        //ass1-task4
+        p->ticks_counter = 0;
+        swtch(&c->context, &p->context); // [t] - context is the kernel space of proccess
+        // [t]Q - what happend if the proccess not yet in sched()?
+        // [t]A - it start at the function forkret (search it)
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
@@ -463,7 +521,195 @@ scheduler(void)
     }
   }
 }
+void scheduler_FCFS(void)
+{
+  struct proc *p;
+  struct cpu *c = mycpu();
+  c->proc = 0;
+  for (;;)
+  {
+    struct proc* minP = 0;
+    int minturn = -1;
+    // Avoid deadlock by ensuring that devices can interrupt.
+    intr_on();
+    for (p = proc; p < &proc[NPROC]; p++)
+    {
+      acquire(&p->lock);
+      if (p->state == RUNNABLE )
+      {
+        // printf("pid: %d, turn: %d\n",p->pid, p->turn);
+        if (minP == 0 || (p->turn < minP->turn)){
+          minP = p;
+          minturn = minP->turn;
+        }
+      }
+      release(&p->lock);
+    }
+    if (minP == 0){
+      continue;
+    }
+    acquire(&minP->lock);
+      if (minP->state == RUNNABLE && minturn == minP->turn){
+        // Switch to chosen process.  It is the process's job
+        // to release its lock and then reacquire it
+        // before jumping back to us.
+        minP->state = RUNNING;
+        c->proc = minP;
+        swtch(&c->context, &minP->context); // [t] - context is the kernel space of proccess
+        // [t]Q - what happend if the proccess not yet in sched()?
+        // [t]A - it start at the function forkret (search it)
+        // Process is done running for now.
+        // It should have changed its p->state before coming back.
+        c->proc = 0;
+      }
+    release(&minP->lock);
+  }
+}
 
+int getRuntimeRatio(struct proc* p){ //ass1-task4.4
+    int decayfactor;
+    switch (p->priority)
+    {
+    case TESTHIGH:
+      decayfactor = 1;
+      break;
+    case HIGH:
+      decayfactor = 3;
+      break;
+    case NORMAL:
+      decayfactor = 5;
+      break;
+    case LOW:
+      decayfactor = 7;
+      break;
+    case TESTLOW:
+      decayfactor = 25;
+      break;
+    default:
+      panic("proc has illigal priority value");
+      break;
+    }
+
+    int runtimeRatio =  p->perf.rutime * decayfactor / 
+          (p->perf.rutime + p-> perf.stime); 
+  // printf("runtime: %d, sleeptime: %d, decayfator: %d, pid: %d\n", p->perf.rutime, p->perf.stime, decayfactor, p->pid);
+  if (runtimeRatio<0)
+    return 0;
+  else
+    return runtimeRatio;
+}
+void scheduler_CFSD(void){
+  struct proc *p;
+  struct cpu *c = mycpu();
+  c->proc = 0;
+  for (;;)
+  {
+    struct proc* minP = 0;
+    // Avoid deadlock by ensuring that devices can interrupt.
+    intr_on();
+    for (p = proc; p < &proc[NPROC]; p++)
+    {
+      acquire(&p->lock);
+      if (p->state == RUNNABLE )
+      {
+        // printf("pid: %d, turn: %d\n",p->pid, p->turn);
+        if (minP == 0 || (getRuntimeRatio(p) < getRuntimeRatio(minP))){
+          minP = p;
+          // printf("minP Pid: %d, p pid: %d\n", minP->pid, p->pid);
+        }
+      }
+      release(&p->lock);
+    }
+    if (minP == 0){
+      continue;
+    }
+    acquire(&minP->lock);
+      if (minP->state == RUNNABLE){
+        // Switch to chosen process.  It is the process's job
+        // to release its lock and then reacquire it
+        // before jumping back to us.
+        minP->state = RUNNING;
+        c->proc = minP;
+        swtch(&c->context, &minP->context); // [t] - context is the kernel space of proccess
+        // [t]Q - what happend if the proccess not yet in sched()?
+        // [t]A - it start at the function forkret (search it)
+        // Process is done running for now.
+        // It should have changed its p->state before coming back.
+        c->proc = 0;
+      }
+    release(&minP->lock);
+  }
+}
+void scheduler_SRT(void)
+{
+  struct proc *p;
+  struct cpu *c = mycpu();
+  c->proc = 0;
+  for (;;)
+  {
+    struct proc *minBurst = 0;
+    // Avoid deadlock by ensuring that devices can interrupt.
+    intr_on();
+    for (p = proc; p < &proc[NPROC]; p++)
+    {
+      acquire(&p->lock);
+      if (p->state == RUNNABLE)
+      {
+        if (minBurst == 0 || (p->perf.avrage_bursttime < minBurst->perf.avrage_bursttime))
+        {
+          minBurst = p;
+          // printf("minBurst Pid: %d, p pid: %d\n", minBurst->pid, p->pid);
+        }
+      }
+      release(&p->lock);
+    }
+    if (minBurst == 0)
+    {
+      continue;
+    }
+    acquire(&minBurst->lock);
+    // Switch to chosen process.  It is the process's job
+    // to release its lock and then reacquire it
+    // before jumping back to us.
+    if (minBurst->state == RUNNABLE)
+    {
+      minBurst->state = RUNNING;
+      c->proc = minBurst;
+      //ass1-task4
+      minBurst->ticks_counter = 0;
+      swtch(&c->context, &minBurst->context); // [t] - context is the kernel space of proccess
+      if (minBurst->burst > 0)
+      {
+        update_avg_burst_zero_burst(minBurst);
+      }
+      // [t]Q - what happend if the proccess not yet in sched()?
+      // [t]A - it start at the function forkret (search it)
+      // Process is done running for now.
+      // It should have changed its p->state before coming back.
+      c->proc = 0;
+    }
+    release(&minBurst->lock);
+  }
+}
+void scheduler(void)
+{
+  #ifdef DEFAULT
+    printf("SCHEDFLAG = DEFAULT\n");
+    scheduler_DEFAULT();
+  #endif
+  #ifdef FCFS
+    printf("SCHEDFLAG = FCFS\n");
+    scheduler_FCFS();
+  #endif
+  #ifdef CFSD
+    printf("SCHEDFLAG = CFSD\n");
+    scheduler_CFSD();
+  #endif
+  #ifdef SRT
+    printf("SCHEDFLAG = SRT\n");
+    scheduler_SRT();
+  #endif
+}
 // Switch to scheduler.  Must hold only p->lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -471,48 +717,55 @@ scheduler(void)
 // be proc->intena and proc->noff, but that would
 // break in the few places where a lock is held but
 // there's no process.
-void
-sched(void)
+void sched(void)
 {
   int intena;
   struct proc *p = myproc();
 
-  if(!holding(&p->lock))
+  if (!holding(&p->lock))
+    //error- dont have the requierd lock
     panic("sched p->lock");
-  if(mycpu()->noff != 1)
+  if (mycpu()->noff != 1)
+    //error - holding more then sigle key
     panic("sched locks");
-  if(p->state == RUNNING)
+  if (p->state == RUNNING)
+    //error - we have just changed the state to RUNNABLE
     panic("sched running");
-  if(intr_get())
+  if (intr_get())
+    //error - there are interapts avilable, which is a probleme
     panic("sched interruptible");
 
   intena = mycpu()->intena;
   swtch(&p->context, &mycpu()->context);
+  //[t] - here we switch to the context of the scheduler (mycpu)
+  //it loads all the registers of the kernal space of the scheduler,
+  //including the instruction pointer, which means the code continue to run from the place the scheduler stops,
+  //the place the scheduler stoped is the line after the swtch() function in the scheduler
   mycpu()->intena = intena;
 }
 
 // Give up the CPU for one scheduling round.
-void
-yield(void)
+void yield(void)
 {
   struct proc *p = myproc();
   acquire(&p->lock);
   p->state = RUNNABLE;
+  p->turn = allocturn();
   sched();
   release(&p->lock);
 }
 
 // A fork child's very first scheduling by scheduler()
 // will swtch to forkret.
-void
-forkret(void)
+void forkret(void)
 {
   static int first = 1;
 
   // Still holding p->lock from scheduler.
   release(&myproc()->lock);
 
-  if (first) {
+  if (first)
+  {
     // File system initialization must be run in the context of a
     // regular process (e.g., because it calls sleep), and thus cannot
     // be run from main().
@@ -525,11 +778,13 @@ forkret(void)
 
 // Atomically release lock and sleep on chan.
 // Reacquires lock when awakened.
-void
-sleep(void *chan, struct spinlock *lk)
+//[t] - @chan is address in the memory that we sleep on so the kernel know to wake it up
+// spinlock is neccecry for the wait() mechanics
+//
+void sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
+
   // Must acquire p->lock in order to
   // change p->state and then call sched.
   // Once we hold p->lock, we can be
@@ -537,7 +792,7 @@ sleep(void *chan, struct spinlock *lk)
   // (wakeup locks p->lock),
   // so it's okay to release lk.
 
-  acquire(&p->lock);  //DOC: sleeplock1
+  acquire(&p->lock); //DOC: sleeplock1
   release(lk);
 
   // Go to sleep.
@@ -546,7 +801,7 @@ sleep(void *chan, struct spinlock *lk)
 
   sched();
 
-  // Tidy up.
+  // Tidy up. //[t] - we don't sleep on a channle any more
   p->chan = 0;
 
   // Reacquire original lock.
@@ -556,16 +811,19 @@ sleep(void *chan, struct spinlock *lk)
 
 // Wake up all processes sleeping on chan.
 // Must be called without any p->lock.
-void
-wakeup(void *chan)
+void wakeup(void *chan)
 {
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++) {
-    if(p != myproc()){
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    if (p != myproc())
+    { //[t] - this check prevent deadlock
       acquire(&p->lock);
-      if(p->state == SLEEPING && p->chan == chan) {
+      if (p->state == SLEEPING && p->chan == chan)
+      {
         p->state = RUNNABLE;
+        p->turn = allocturn();
       }
       release(&p->lock);
     }
@@ -575,18 +833,21 @@ wakeup(void *chan)
 // Kill the process with the given pid.
 // The victim won't exit until it tries to return
 // to user space (see usertrap() in trap.c).
-int
-kill(int pid)
+int kill(int pid)
 {
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++){
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
     acquire(&p->lock);
-    if(p->pid == pid){
+    if (p->pid == pid)
+    {
       p->killed = 1;
-      if(p->state == SLEEPING){
+      if (p->state == SLEEPING)
+      {
         // Wake process from sleep().
         p->state = RUNNABLE;
+        p->turn = allocturn();
       }
       release(&p->lock);
       return 0;
@@ -599,13 +860,15 @@ kill(int pid)
 // Copy to either a user address, or kernel address,
 // depending on usr_dst.
 // Returns 0 on success, -1 on error.
-int
-either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
+int either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
 {
   struct proc *p = myproc();
-  if(user_dst){
+  if (user_dst)
+  {
     return copyout(p->pagetable, dst, src, len);
-  } else {
+  }
+  else
+  {
     memmove((char *)dst, src, len);
     return 0;
   }
@@ -614,14 +877,16 @@ either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
 // Copy from either a user address, or kernel address,
 // depending on usr_src.
 // Returns 0 on success, -1 on error.
-int
-either_copyin(void *dst, int user_src, uint64 src, uint64 len)
+int either_copyin(void *dst, int user_src, uint64 src, uint64 len)
 {
   struct proc *p = myproc();
-  if(user_src){
+  if (user_src)
+  {
     return copyin(p->pagetable, dst, src, len);
-  } else {
-    memmove(dst, (char*)src, len);
+  }
+  else
+  {
+    memmove(dst, (char *)src, len);
     return 0;
   }
 }
@@ -629,24 +894,23 @@ either_copyin(void *dst, int user_src, uint64 src, uint64 len)
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
+void procdump(void)
 {
   static char *states[] = {
-  [UNUSED]    "unused",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
-  };
+      [UNUSED] "unused",
+      [SLEEPING] "sleep ",
+      [RUNNABLE] "runble",
+      [RUNNING] "run   ",
+      [ZOMBIE] "zombie"};
   struct proc *p;
   char *state;
 
   printf("\n");
-  for(p = proc; p < &proc[NPROC]; p++){
-    if(p->state == UNUSED)
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    if (p->state == UNUSED)
       continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
       state = states[p->state];
     else
       state = "???";
@@ -654,3 +918,137 @@ procdump(void)
     printf("\n");
   }
 }
+
+int wait_stat(uint64 status, uint64 performence)
+{
+  struct proc *np;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for (;;)
+  {
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for (np = proc; np < &proc[NPROC]; np++)
+    {
+      if (np->parent == p)
+      {
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&np->lock);
+
+        havekids = 1;
+        if (np->state == ZOMBIE)
+        {
+          // Found one.
+          pid = np->pid;
+          if (status != 0 && copyout(p->pagetable, status, (char *)&np->xstate,
+                                     sizeof(np->xstate)) < 0)
+          {
+            release(&np->lock);
+            release(&wait_lock);
+            return -1;
+          }
+          if (performence != 0 && copyout(p->pagetable, performence, (char *)&np->perf,
+                                          sizeof(np->perf)) < 0)
+          {
+            release(&np->lock);
+            release(&wait_lock);
+            return -1;
+          }
+          freeproc(np);
+          release(&np->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&np->lock);
+      }
+    }
+    // No point waiting if we don't have any children.
+    if (!havekids || p->killed)
+    {
+      release(&wait_lock);
+      return -1;
+    }
+
+    // Wait for a child to exit.
+    sleep(p, &wait_lock); //DOC: wait-sleep
+  }
+}
+
+void update_avg_burst_zero_burst(struct proc *p)
+{
+  uint B = p->burst;
+  uint A = p->perf.avrage_bursttime;
+  A = ALPHA * B + (100 - ALPHA) * A / 100;
+  p->perf.avrage_bursttime = A;
+  p->burst = 0;
+}
+
+void update_perf()
+{
+  struct proc *p;
+
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    acquire(&p->lock);
+    switch (p->state)
+    {
+    case RUNNABLE:
+      p->burst++;
+      p->perf.retime++;
+      break;
+    case RUNNING:
+      p->perf.rutime++;
+      break;
+    case SLEEPING:
+      p->perf.stime++;
+      // printf("update stime pid:%d, stime: %d\n",p->pid,p->perf.stime);
+      break;
+    /* case ZOMBIE:
+      if (p->perf.ttime < 0)
+      {
+        p->perf.ttime = ticks;
+      }
+      break;
+     */
+    default:
+      break;
+    }
+    release(&p->lock);
+  }
+}
+
+int set_priority(int priority){
+    if (
+      priority != TESTHIGH &&
+      priority != HIGH &&
+      priority != NORMAL &&
+      priority != LOW &&
+      priority != TESTLOW
+    )
+    return -1;
+    else {
+      struct proc *p = myproc();
+      acquire(&p->lock);
+        p->priority = priority;
+      release(&p->lock);
+      return 0;
+    }
+}
+int 
+trace(int mask,int pid)
+{
+  struct proc* p;
+  for (p=proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if (p->pid == pid){
+      p->trace_mask = mask;
+      release(&p->lock);
+      return 0;
+    }
+    release(&p->lock);
+  }
+  return -1;
+}
\ No newline at end of file
diff --git a/kernel/proc.c:Zone.Identifier b/kernel/proc.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/proc.d:Zone.Identifier b/kernel/proc.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/proc.h b/kernel/proc.h
index 8e90008..056b7e2 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -1,5 +1,6 @@
 // Saved registers for kernel context switches.
-struct context {
+struct context
+{
   uint64 ra;
   uint64 sp;
 
@@ -19,11 +20,12 @@ struct context {
 };
 
 // Per-CPU state.
-struct cpu {
-  struct proc *proc;          // The process running on this cpu, or null.
-  struct context context;     // swtch() here to enter scheduler().
-  int noff;                   // Depth of push_off() nesting.
-  int intena;                 // Were interrupts enabled before push_off()?
+struct cpu
+{
+  struct proc *proc;      // The process running on this cpu, or null.
+  struct context context; // swtch() here to enter scheduler().
+  int noff;               // Depth of push_off() nesting.
+  int intena;             // Were interrupts enabled before push_off()?
 };
 
 extern struct cpu cpus[NCPU];
@@ -41,7 +43,8 @@ extern struct cpu cpus[NCPU];
 // the trapframe includes callee-saved user registers like s0-s11 because the
 // return-to-user path via usertrapret() doesn't return through
 // the entire kernel call stack.
-struct trapframe {
+struct trapframe
+{
   /*   0 */ uint64 kernel_satp;   // kernel page table
   /*   8 */ uint64 kernel_sp;     // top of process's kernel stack
   /*  16 */ uint64 kernel_trap;   // usertrap()
@@ -80,21 +83,47 @@ struct trapframe {
   /* 280 */ uint64 t6;
 };
 
-enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
+enum procpriority {TESTHIGH, HIGH, NORMAL, LOW, TESTLOW};
+enum procstate
+{
+  UNUSED,
+  USED,
+  SLEEPING,
+  RUNNABLE,
+  RUNNING,
+  ZOMBIE
+};
 
 // Per-process state
-struct proc {
-  struct spinlock lock;
+struct perf
+{
+  /* data */
+  int ctime;
+  int ttime;
+  int stime;
+  int retime;
+  int rutime;
+  int avrage_bursttime;
+};
 
+struct proc
+{
+  struct spinlock lock; //[t]Q - why the procces needs it's own lock?
+  // [t]A - because other procces can wake us up
+  // because the wakeing functionality is not atomic, only one procces can enter this,
+  // what we see here?? we see that the kernel space of procces use THE SAME MEMORY
+  //there for we need to treet it like threads in regular
   // p->lock must be held when using these:
-  enum procstate state;        // Process state
-  void *chan;                  // If non-zero, sleeping on chan
-  int killed;                  // If non-zero, have been killed
-  int xstate;                  // Exit status to be returned to parent's wait
-  int pid;                     // Process ID
+  struct perf perf;
 
+  enum procstate state; // Process state
+  void *chan;           // If non-zero, sleeping on chan
+  int killed;           // If non-zero, have been killed
+  int xstate;           // Exit status to be returned to parent's wait
+  int pid;              // Process ID
+  uint burst;
   // proc_tree_lock must be held when using this:
-  struct proc *parent;         // Parent process
+  struct proc *parent; // Parent process
 
   // these are private to the process, so p->lock need not be held.
   uint64 kstack;               // Virtual address of kernel stack
@@ -105,4 +134,11 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int ticks_counter;           // current running time counter
+  int priority;                // priority of the procces which also is holds the value of the decay factor
+  int turn;                    //ass1-task4
+  int trace_mask;               // task2
 };
+
+void update_perf();
+void update_avg_burst_zero_burst(struct proc *p);
\ No newline at end of file
diff --git a/kernel/proc.h:Zone.Identifier b/kernel/proc.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/proc.o:Zone.Identifier b/kernel/proc.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/ramdisk.c:Zone.Identifier b/kernel/ramdisk.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/riscv.h:Zone.Identifier b/kernel/riscv.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/sleeplock.c:Zone.Identifier b/kernel/sleeplock.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/sleeplock.d:Zone.Identifier b/kernel/sleeplock.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/sleeplock.h:Zone.Identifier b/kernel/sleeplock.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/sleeplock.o:Zone.Identifier b/kernel/sleeplock.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/spinlock.c b/kernel/spinlock.c
index 9840302..5d40eec 100644
--- a/kernel/spinlock.c
+++ b/kernel/spinlock.c
@@ -29,6 +29,8 @@ acquire(struct spinlock *lk)
   //   a5 = 1
   //   s1 = &lk->locked
   //   amoswap.w.aq a5, a5, (s1)
+  // [t] - this is atomic operation that solve the mutal exclusion problem of busy wait
+  // be aware that this is still a stupid busy wait
   while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
     ;
 
@@ -67,7 +69,8 @@ release(struct spinlock *lk)
   //   s1 = &lk->locked
   //   amoswap.w zero, zero, (s1)
   __sync_lock_release(&lk->locked);
-
+  // [t] - pushoof/popoff are a iteraupt control, the value at the head of the stack is deciding if iterupts are allowed or not 
+  // its cool and let us work with several locks
   pop_off();
 }
 
diff --git a/kernel/spinlock.c:Zone.Identifier b/kernel/spinlock.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/spinlock.d:Zone.Identifier b/kernel/spinlock.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/spinlock.h:Zone.Identifier b/kernel/spinlock.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/spinlock.o:Zone.Identifier b/kernel/spinlock.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/start.c b/kernel/start.c
index 0ec7013..1689e6c 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -3,8 +3,9 @@
 #include "memlayout.h"
 #include "riscv.h"
 #include "defs.h"
-//change to test github
 
+//change to test github
+//test commit 2
 void main();
 void timerinit();
 
diff --git a/kernel/start.c:Zone.Identifier b/kernel/start.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/start.d:Zone.Identifier b/kernel/start.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/start.o:Zone.Identifier b/kernel/start.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/stat.h:Zone.Identifier b/kernel/stat.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/string.c:Zone.Identifier b/kernel/string.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/string.d:Zone.Identifier b/kernel/string.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/string.o:Zone.Identifier b/kernel/string.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/swtch.S:Zone.Identifier b/kernel/swtch.S:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/swtch.o:Zone.Identifier b/kernel/swtch.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..6d83528 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -6,7 +6,30 @@
 #include "proc.h"
 #include "syscall.h"
 #include "defs.h"
-
+static char* num_to_name_map[] = {
+  "fork",
+  "exit",
+  "wait",
+  "pipe",
+  "read",
+  "kill",
+  "exec",
+  "fstat",
+  "chdir",
+  "dup",
+  "getpid",
+  "sbrk",
+  "sleep",
+  "uptime",
+  "open",
+  "write",
+  "mknod",
+  "unlink",
+  "link",
+  "mkdir",
+  "close",
+  "trace",
+};
 // Fetch the uint64 at addr from the current process.
 int
 fetchaddr(uint64 addr, uint64 *ip)
@@ -30,6 +53,8 @@ fetchstr(uint64 addr, char *buf, int max)
     return err;
   return strlen(buf);
 }
+//getting the argument of the systemcall?
+//it is stored at specific register
 
 static uint64
 argraw(int n)
@@ -83,6 +108,24 @@ argstr(int n, char *buf, int max)
   return fetchstr(addr, buf, max);
 }
 
+void print_trace(struct proc* p, int num, int retval){
+    int mask = p->trace_mask;
+    int pid = p->pid;
+    if ((mask & 1 << num) != 0){
+      char* syscall_name = num_to_name_map[num-1];
+      if (num == 1){ //fork
+        printf("%d: syscall %s %s -> %d\n", pid, syscall_name, "NULL", retval);
+      }
+      else if (num == 6 || num ==12){
+        int argv;
+        argint(0, &argv);
+        printf("%d: syscall %s %d -> %d\n", pid, syscall_name, argv, retval);
+      }
+      else{
+        printf("%d: syscall %s -> %d\n", pid, syscall_name, retval);
+      }
+    }
+}
 extern uint64 sys_chdir(void);
 extern uint64 sys_close(void);
 extern uint64 sys_dup(void);
@@ -104,7 +147,10 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_wait_stat(void);
+extern uint64 sys_set_priority(void);
 
+extern uint64 sys_trace(void);
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
 [SYS_exit]    sys_exit,
@@ -127,17 +173,24 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_wait_stat]   sys_wait_stat,
+[SYS_set_priority]   sys_set_priority,
+[SYS_trace]   sys_trace,
 };
 
 void
-syscall(void)
+syscall(void)  
 {
   int num;
   struct proc *p = myproc();
 
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-    p->trapframe->a0 = syscalls[num]();
+    //a0 stores the answer from the syscall
+    //process ID,”: syscall”, system call name, system call arguments,-> , return value
+    int retval = syscalls[num]();
+    print_trace(p,num,retval);
+    p->trapframe->a0 = retval;
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.c:Zone.Identifier b/kernel/syscall.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/syscall.d:Zone.Identifier b/kernel/syscall.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..9f9fe2c 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_wait_stat 22
+#define SYS_set_priority 23
+#define SYS_trace  24
diff --git a/kernel/syscall.h:Zone.Identifier b/kernel/syscall.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/syscall.o:Zone.Identifier b/kernel/syscall.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/sysfile.c:Zone.Identifier b/kernel/sysfile.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/sysfile.d:Zone.Identifier b/kernel/sysfile.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/sysfile.o:Zone.Identifier b/kernel/sysfile.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..ca45304 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -11,10 +11,10 @@ uint64
 sys_exit(void)
 {
   int n;
-  if(argint(0, &n) < 0)
+  if (argint(0, &n) < 0)
     return -1;
   exit(n);
-  return 0;  // not reached
+  return 0; // not reached
 }
 
 uint64
@@ -33,7 +33,7 @@ uint64
 sys_wait(void)
 {
   uint64 p;
-  if(argaddr(0, &p) < 0)
+  if (argaddr(0, &p) < 0)
     return -1;
   return wait(p);
 }
@@ -44,10 +44,10 @@ sys_sbrk(void)
   int addr;
   int n;
 
-  if(argint(0, &n) < 0)
+  if (argint(0, &n) < 0)
     return -1;
   addr = myproc()->sz;
-  if(growproc(n) < 0)
+  if (growproc(n) < 0)
     return -1;
   return addr;
 }
@@ -58,12 +58,14 @@ sys_sleep(void)
   int n;
   uint ticks0;
 
-  if(argint(0, &n) < 0)
+  if (argint(0, &n) < 0)
     return -1;
   acquire(&tickslock);
   ticks0 = ticks;
-  while(ticks - ticks0 < n){
-    if(myproc()->killed){
+  while (ticks - ticks0 < n)
+  {
+    if (myproc()->killed)
+    {
       release(&tickslock);
       return -1;
     }
@@ -78,7 +80,7 @@ sys_kill(void)
 {
   int pid;
 
-  if(argint(0, &pid) < 0)
+  if (argint(0, &pid) < 0)
     return -1;
   return kill(pid);
 }
@@ -95,3 +97,33 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_wait_stat(void)
+{
+  uint64 p;
+  uint64 status;
+  if (argaddr(1,&p) < 0)
+    return -1;
+  
+  if (argaddr(0,&status) < 0)
+    return -1;
+  
+  return wait_stat(status,p);
+}
+
+uint64
+sys_set_priority(void){
+  int priority;
+  if (argint(0, &priority) < 0)
+    return -1;
+  return set_priority(priority);
+}
+uint64
+sys_trace(void){
+  int mask;
+  int pid;
+  if(argint(0, &mask) < 0 || argint(1, &pid) < 0)
+    return -1;
+  return trace(mask, pid);
+}
diff --git a/kernel/sysproc.c:Zone.Identifier b/kernel/sysproc.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/sysproc.d:Zone.Identifier b/kernel/sysproc.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/sysproc.o:Zone.Identifier b/kernel/sysproc.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/trampoline.S:Zone.Identifier b/kernel/trampoline.S:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/trampoline.o:Zone.Identifier b/kernel/trampoline.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..ec7e332 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -9,6 +9,7 @@
 struct spinlock tickslock;
 uint ticks;
 
+
 extern char trampoline[], uservec[], userret[];
 
 // in kernelvec.S, calls kerneltrap().
@@ -76,10 +77,16 @@ usertrap(void)
   if(p->killed)
     exit(-1);
 
+  #ifndef FCFS
   // give up the CPU if this is a timer interrupt.
-  if(which_dev == 2)
-    yield();
-
+  if(which_dev == 2){
+    p->ticks_counter++;
+    // printf("USER pid: %d, ticks_counter: %d\n", p->pid, p->ticks_counter);
+    //ass1-task4
+    if (p->ticks_counter == QUNTOM)
+        yield();
+  }
+  #endif
   usertrapret();
 }
 
@@ -149,10 +156,18 @@ kerneltrap()
     panic("kerneltrap");
   }
 
+  #ifndef FCFS
   // give up the CPU if this is a timer interrupt.
-  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
-    yield();
+  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING){
+    struct proc* p = myproc();
+    p->ticks_counter++;
+    // printf("KERNEL pid: %d, ticks_counter: %d\n", p->pid, p->ticks_counter);
+    //ass1-task4
+    if (p->ticks_counter == QUNTOM)
+        yield();
+  }
 
+  #endif
   // the yield() may have caused some traps to occur,
   // so restore trap registers for use by kernelvec.S's sepc instruction.
   w_sepc(sepc);
@@ -164,6 +179,7 @@ clockintr()
 {
   acquire(&tickslock);
   ticks++;
+  update_perf();
   wakeup(&ticks);
   release(&tickslock);
 }
diff --git a/kernel/trap.c:Zone.Identifier b/kernel/trap.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/trap.d:Zone.Identifier b/kernel/trap.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/trap.o:Zone.Identifier b/kernel/trap.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/types.h:Zone.Identifier b/kernel/types.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/uart.c:Zone.Identifier b/kernel/uart.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/uart.d:Zone.Identifier b/kernel/uart.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/uart.o:Zone.Identifier b/kernel/uart.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/virtio.h:Zone.Identifier b/kernel/virtio.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/virtio_disk.c:Zone.Identifier b/kernel/virtio_disk.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/virtio_disk.d:Zone.Identifier b/kernel/virtio_disk.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/virtio_disk.o:Zone.Identifier b/kernel/virtio_disk.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/vm.c:Zone.Identifier b/kernel/vm.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/vm.d:Zone.Identifier b/kernel/vm.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/vm.o:Zone.Identifier b/kernel/vm.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/cat.asm:Zone.Identifier b/user/cat.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/cat.c:Zone.Identifier b/user/cat.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/cat.d:Zone.Identifier b/user/cat.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/cat.o:Zone.Identifier b/user/cat.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/cat.sym:Zone.Identifier b/user/cat.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/echo.asm:Zone.Identifier b/user/echo.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/echo.c:Zone.Identifier b/user/echo.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/echo.d:Zone.Identifier b/user/echo.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/echo.o:Zone.Identifier b/user/echo.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/echo.sym:Zone.Identifier b/user/echo.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/forktest.asm:Zone.Identifier b/user/forktest.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/forktest.c:Zone.Identifier b/user/forktest.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/forktest.d:Zone.Identifier b/user/forktest.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/forktest.o:Zone.Identifier b/user/forktest.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/grep.asm:Zone.Identifier b/user/grep.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/grep.c:Zone.Identifier b/user/grep.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/grep.d:Zone.Identifier b/user/grep.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/grep.o:Zone.Identifier b/user/grep.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/grep.sym:Zone.Identifier b/user/grep.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/grind.asm:Zone.Identifier b/user/grind.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/grind.c:Zone.Identifier b/user/grind.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/grind.d:Zone.Identifier b/user/grind.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/grind.o:Zone.Identifier b/user/grind.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/grind.sym:Zone.Identifier b/user/grind.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/init.asm:Zone.Identifier b/user/init.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/init.c b/user/init.c
index e0a5689..95f481c 100644
--- a/user/init.c
+++ b/user/init.c
@@ -31,6 +31,7 @@ main(void)
       exit(1);
     }
     if(pid == 0){
+      //[t] - SHELL
       exec("sh", argv);
       printf("init: exec sh failed\n");
       exit(1);
diff --git a/user/init.c:Zone.Identifier b/user/init.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/init.d:Zone.Identifier b/user/init.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/init.o:Zone.Identifier b/user/init.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/init.sym:Zone.Identifier b/user/init.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/initcode.S:Zone.Identifier b/user/initcode.S:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/initcode.asm:Zone.Identifier b/user/initcode.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/initcode.d:Zone.Identifier b/user/initcode.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/initcode.o:Zone.Identifier b/user/initcode.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/initcode.out:Zone.Identifier b/user/initcode.out:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/initcode:Zone.Identifier b/user/initcode:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/kill.asm:Zone.Identifier b/user/kill.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/kill.c:Zone.Identifier b/user/kill.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/kill.d:Zone.Identifier b/user/kill.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/kill.o:Zone.Identifier b/user/kill.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/kill.sym:Zone.Identifier b/user/kill.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/ln.asm:Zone.Identifier b/user/ln.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/ln.c:Zone.Identifier b/user/ln.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/ln.d:Zone.Identifier b/user/ln.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/ln.o:Zone.Identifier b/user/ln.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/ln.sym:Zone.Identifier b/user/ln.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/ls.asm:Zone.Identifier b/user/ls.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/ls.c:Zone.Identifier b/user/ls.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/ls.d:Zone.Identifier b/user/ls.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/ls.o:Zone.Identifier b/user/ls.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/ls.sym:Zone.Identifier b/user/ls.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/mkdir.asm:Zone.Identifier b/user/mkdir.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/mkdir.c:Zone.Identifier b/user/mkdir.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/mkdir.d:Zone.Identifier b/user/mkdir.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/mkdir.o:Zone.Identifier b/user/mkdir.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/mkdir.sym:Zone.Identifier b/user/mkdir.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/path b/user/path
new file mode 100644
index 0000000..027c827
--- /dev/null
+++ b/user/path
@@ -0,0 +1 @@
+/:/user/:
\ No newline at end of file
diff --git a/user/path:Zone.Identifier b/user/path:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/printf.c:Zone.Identifier b/user/printf.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/printf.d:Zone.Identifier b/user/printf.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/printf.o:Zone.Identifier b/user/printf.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/rm.asm:Zone.Identifier b/user/rm.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/rm.c:Zone.Identifier b/user/rm.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/rm.d:Zone.Identifier b/user/rm.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/rm.o:Zone.Identifier b/user/rm.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/rm.sym:Zone.Identifier b/user/rm.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/sh.asm:Zone.Identifier b/user/sh.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/sh.c b/user/sh.c
index 83dd513..79fabf3 100644
--- a/user/sh.c
+++ b/user/sh.c
@@ -3,27 +3,31 @@
 #include "kernel/types.h"
 #include "user/user.h"
 #include "kernel/fcntl.h"
+#include "kernel/stat.h"
 
 // Parsed command representation
-#define EXEC  1
+#define EXEC 1
 #define REDIR 2
-#define PIPE  3
-#define LIST  4
-#define BACK  5
+#define PIPE 3
+#define LIST 4
+#define BACK 5
 
 #define MAXARGS 10
 
-struct cmd {
+struct cmd
+{
   int type;
 };
 
-struct execcmd {
+struct execcmd
+{
   int type;
   char *argv[MAXARGS];
   char *eargv[MAXARGS];
 };
 
-struct redircmd {
+struct redircmd
+{
   int type;
   struct cmd *cmd;
   char *file;
@@ -32,30 +36,61 @@ struct redircmd {
   int fd;
 };
 
-struct pipecmd {
+struct pipecmd
+{
   int type;
   struct cmd *left;
   struct cmd *right;
 };
 
-struct listcmd {
+struct listcmd
+{
   int type;
   struct cmd *left;
   struct cmd *right;
 };
 
-struct backcmd {
+struct backcmd
+{
   int type;
   struct cmd *cmd;
 };
 
-int fork1(void);  // Fork but panics on failure.
-void panic(char*);
-struct cmd *parsecmd(char*);
+int fork1(void); // Fork but panics on failure.
+void panic(char *);
+struct cmd *parsecmd(char *);
 
+//looks for the command in all posible paths from the '/path' file
+//and execute if found
+void look_for_command_in_PATH_and_exec(struct execcmd *ecmd)
+{
+  char *command_name = ecmd->argv[0];
+  struct stat path_file_status;
+  if (stat("/path", &path_file_status) == -1)
+  {
+    panic("can't find 'path' file");
+  }
+  char *path_buf = malloc(path_file_status.size);
+  int fd = open("/path", O_RDONLY);
+  read(fd, path_buf, path_file_status.size);
+  printf(path_buf);
+  close(fd);
+  char *curr_path = path_buf;
+  while (curr_path < path_buf + path_file_status.size - 1)
+  {
+    char *end = strchr(curr_path, ':');
+    int length = end - curr_path;
+    char *absolutePath = malloc(length + strlen(command_name));
+    //copy the prefix to absolute path
+    memmove(absolutePath, curr_path, length);
+    //copy the command name to the end of the absolute path
+    memmove(absolutePath + length, command_name, strlen(command_name));
+    exec(absolutePath, ecmd->argv);
+    curr_path = end + 1;
+  }
+}
 // Execute cmd.  Never returns.
-void
-runcmd(struct cmd *cmd)
+void runcmd(struct cmd *cmd)
 {
   int p[2];
   struct backcmd *bcmd;
@@ -64,25 +99,28 @@ runcmd(struct cmd *cmd)
   struct pipecmd *pcmd;
   struct redircmd *rcmd;
 
-  if(cmd == 0)
+  if (cmd == 0)
     exit(1);
 
-  switch(cmd->type){
+  switch (cmd->type)
+  {
   default:
     panic("runcmd");
 
   case EXEC:
-    ecmd = (struct execcmd*)cmd;
-    if(ecmd->argv[0] == 0)
-      exit(1);
+    ecmd = (struct execcmd *)cmd;
+    if (ecmd->argv[0] == 0)
+      exit(1);    
     exec(ecmd->argv[0], ecmd->argv);
+    look_for_command_in_PATH_and_exec(ecmd);
     fprintf(2, "exec %s failed\n", ecmd->argv[0]);
     break;
 
   case REDIR:
-    rcmd = (struct redircmd*)cmd;
+    rcmd = (struct redircmd *)cmd;
     close(rcmd->fd);
-    if(open(rcmd->file, rcmd->mode) < 0){
+    if (open(rcmd->file, rcmd->mode) < 0)
+    {
       fprintf(2, "open %s failed\n", rcmd->file);
       exit(1);
     }
@@ -90,25 +128,27 @@ runcmd(struct cmd *cmd)
     break;
 
   case LIST:
-    lcmd = (struct listcmd*)cmd;
-    if(fork1() == 0)
+    lcmd = (struct listcmd *)cmd;
+    if (fork1() == 0)
       runcmd(lcmd->left);
     wait(0);
     runcmd(lcmd->right);
     break;
 
   case PIPE:
-    pcmd = (struct pipecmd*)cmd;
-    if(pipe(p) < 0)
+    pcmd = (struct pipecmd *)cmd;
+    if (pipe(p) < 0)
       panic("pipe");
-    if(fork1() == 0){
+    if (fork1() == 0)
+    {
       close(1);
       dup(p[1]);
       close(p[0]);
       close(p[1]);
       runcmd(pcmd->left);
     }
-    if(fork1() == 0){
+    if (fork1() == 0)
+    {
       close(0);
       dup(p[0]);
       close(p[0]);
@@ -122,69 +162,70 @@ runcmd(struct cmd *cmd)
     break;
 
   case BACK:
-    bcmd = (struct backcmd*)cmd;
-    if(fork1() == 0)
+    bcmd = (struct backcmd *)cmd;
+    if (fork1() == 0)
       runcmd(bcmd->cmd);
     break;
   }
   exit(0);
 }
 
-int
-getcmd(char *buf, int nbuf)
+int getcmd(char *buf, int nbuf)
 {
   fprintf(2, "$ ");
   memset(buf, 0, nbuf);
   gets(buf, nbuf);
-  if(buf[0] == 0) // EOF
+  if (buf[0] == 0) // EOF
     return -1;
   return 0;
 }
 
-int
-main(void)
+int main(void)
 {
+  fprintf(2, "started shell\n");
   static char buf[100];
   int fd;
 
   // Ensure that three file descriptors are open.
-  while((fd = open("console", O_RDWR)) >= 0){
-    if(fd >= 3){
+  while ((fd = open("console", O_RDWR)) >= 0)
+  {
+    if (fd >= 3)
+    {
       close(fd);
       break;
     }
   }
 
   // Read and run input commands.
-  while(getcmd(buf, sizeof(buf)) >= 0){
-    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+  while (getcmd(buf, sizeof(buf)) >= 0)
+  {
+    if (buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' ')
+    {
       // Chdir must be called by the parent, not the child.
-      buf[strlen(buf)-1] = 0;  // chop \n
-      if(chdir(buf+3) < 0)
-        fprintf(2, "cannot cd %s\n", buf+3);
+      buf[strlen(buf) - 1] = 0; // chop \n
+      if (chdir(buf + 3) < 0)
+        fprintf(2, "cannot cd %s\n", buf + 3);
       continue;
     }
-    if(fork1() == 0)
+    if (fork1() == 0)
       runcmd(parsecmd(buf));
     wait(0);
   }
   exit(0);
 }
 
-void
-panic(char *s)
+void panic(char *s)
 {
   fprintf(2, "%s\n", s);
   exit(1);
 }
 
-int
-fork1(void)
+int fork1(void)
 {
   int pid;
 
   pid = fork();
-  if(pid == -1)
+  if (pid == -1)
     panic("fork");
   return pid;
 }
@@ -192,7 +233,7 @@ fork1(void)
 //PAGEBREAK!
 // Constructors
 
-struct cmd*
+struct cmd *
 execcmd(void)
 {
   struct execcmd *cmd;
@@ -200,10 +241,10 @@ execcmd(void)
   cmd = malloc(sizeof(*cmd));
   memset(cmd, 0, sizeof(*cmd));
   cmd->type = EXEC;
-  return (struct cmd*)cmd;
+  return (struct cmd *)cmd;
 }
 
-struct cmd*
+struct cmd *
 redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
 {
   struct redircmd *cmd;
@@ -216,10 +257,10 @@ redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
   cmd->efile = efile;
   cmd->mode = mode;
   cmd->fd = fd;
-  return (struct cmd*)cmd;
+  return (struct cmd *)cmd;
 }
 
-struct cmd*
+struct cmd *
 pipecmd(struct cmd *left, struct cmd *right)
 {
   struct pipecmd *cmd;
@@ -229,10 +270,10 @@ pipecmd(struct cmd *left, struct cmd *right)
   cmd->type = PIPE;
   cmd->left = left;
   cmd->right = right;
-  return (struct cmd*)cmd;
+  return (struct cmd *)cmd;
 }
 
-struct cmd*
+struct cmd *
 listcmd(struct cmd *left, struct cmd *right)
 {
   struct listcmd *cmd;
@@ -242,10 +283,10 @@ listcmd(struct cmd *left, struct cmd *right)
   cmd->type = LIST;
   cmd->left = left;
   cmd->right = right;
-  return (struct cmd*)cmd;
+  return (struct cmd *)cmd;
 }
 
-struct cmd*
+struct cmd *
 backcmd(struct cmd *subcmd)
 {
   struct backcmd *cmd;
@@ -254,7 +295,7 @@ backcmd(struct cmd *subcmd)
   memset(cmd, 0, sizeof(*cmd));
   cmd->type = BACK;
   cmd->cmd = subcmd;
-  return (struct cmd*)cmd;
+  return (struct cmd *)cmd;
 }
 //PAGEBREAK!
 // Parsing
@@ -262,19 +303,19 @@ backcmd(struct cmd *subcmd)
 char whitespace[] = " \t\r\n\v";
 char symbols[] = "<|>&;()";
 
-int
-gettoken(char **ps, char *es, char **q, char **eq)
+int gettoken(char **ps, char *es, char **q, char **eq)
 {
   char *s;
   int ret;
 
   s = *ps;
-  while(s < es && strchr(whitespace, *s))
+  while (s < es && strchr(whitespace, *s))
     s++;
-  if(q)
+  if (q)
     *q = s;
   ret = *s;
-  switch(*s){
+  switch (*s)
+  {
   case 0:
     break;
   case '|':
@@ -287,44 +328,44 @@ gettoken(char **ps, char *es, char **q, char **eq)
     break;
   case '>':
     s++;
-    if(*s == '>'){
+    if (*s == '>')
+    {
       ret = '+';
       s++;
     }
     break;
   default:
     ret = 'a';
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+    while (s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
       s++;
     break;
   }
-  if(eq)
+  if (eq)
     *eq = s;
 
-  while(s < es && strchr(whitespace, *s))
+  while (s < es && strchr(whitespace, *s))
     s++;
   *ps = s;
   return ret;
 }
 
-int
-peek(char **ps, char *es, char *toks)
+int peek(char **ps, char *es, char *toks)
 {
   char *s;
 
   s = *ps;
-  while(s < es && strchr(whitespace, *s))
+  while (s < es && strchr(whitespace, *s))
     s++;
   *ps = s;
   return *s && strchr(toks, *s);
 }
 
-struct cmd *parseline(char**, char*);
-struct cmd *parsepipe(char**, char*);
-struct cmd *parseexec(char**, char*);
-struct cmd *nulterminate(struct cmd*);
+struct cmd *parseline(char **, char *);
+struct cmd *parsepipe(char **, char *);
+struct cmd *parseexec(char **, char *);
+struct cmd *nulterminate(struct cmd *);
 
-struct cmd*
+struct cmd *
 parsecmd(char *s)
 {
   char *es;
@@ -333,7 +374,8 @@ parsecmd(char *s)
   es = s + strlen(s);
   cmd = parseline(&s, es);
   peek(&s, es, "");
-  if(s != es){
+  if (s != es)
+  {
     fprintf(2, "leftovers: %s\n", s);
     panic("syntax");
   }
@@ -341,78 +383,83 @@ parsecmd(char *s)
   return cmd;
 }
 
-struct cmd*
+struct cmd *
 parseline(char **ps, char *es)
 {
   struct cmd *cmd;
 
   cmd = parsepipe(ps, es);
-  while(peek(ps, es, "&")){
+  while (peek(ps, es, "&"))
+  {
     gettoken(ps, es, 0, 0);
     cmd = backcmd(cmd);
   }
-  if(peek(ps, es, ";")){
+  if (peek(ps, es, ";"))
+  {
     gettoken(ps, es, 0, 0);
     cmd = listcmd(cmd, parseline(ps, es));
   }
   return cmd;
 }
 
-struct cmd*
+struct cmd *
 parsepipe(char **ps, char *es)
 {
   struct cmd *cmd;
 
   cmd = parseexec(ps, es);
-  if(peek(ps, es, "|")){
+  if (peek(ps, es, "|"))
+  {
     gettoken(ps, es, 0, 0);
     cmd = pipecmd(cmd, parsepipe(ps, es));
   }
   return cmd;
 }
 
-struct cmd*
+struct cmd *
 parseredirs(struct cmd *cmd, char **ps, char *es)
 {
   int tok;
   char *q, *eq;
 
-  while(peek(ps, es, "<>")){
+  while (peek(ps, es, "<>"))
+  {
     tok = gettoken(ps, es, 0, 0);
-    if(gettoken(ps, es, &q, &eq) != 'a')
+    if (gettoken(ps, es, &q, &eq) != 'a')
       panic("missing file for redirection");
-    switch(tok){
+    switch (tok)
+    {
     case '<':
       cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
       break;
     case '>':
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE|O_TRUNC, 1);
+      cmd = redircmd(cmd, q, eq, O_WRONLY | O_CREATE | O_TRUNC, 1);
       break;
-    case '+':  // >>
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+    case '+': // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY | O_CREATE, 1);
       break;
     }
   }
   return cmd;
 }
 
-struct cmd*
+struct cmd *
 parseblock(char **ps, char *es)
 {
   struct cmd *cmd;
 
-  if(!peek(ps, es, "("))
+  if (!peek(ps, es, "("))
     panic("parseblock");
   gettoken(ps, es, 0, 0);
   cmd = parseline(ps, es);
-  if(!peek(ps, es, ")"))
+  if (!peek(ps, es, ")"))
     panic("syntax - missing )");
   gettoken(ps, es, 0, 0);
   cmd = parseredirs(cmd, ps, es);
   return cmd;
 }
 
-struct cmd*
+struct cmd *
 parseexec(char **ps, char *es)
 {
   char *q, *eq;
@@ -420,23 +467,24 @@ parseexec(char **ps, char *es)
   struct execcmd *cmd;
   struct cmd *ret;
 
-  if(peek(ps, es, "("))
+  if (peek(ps, es, "("))
     return parseblock(ps, es);
 
   ret = execcmd();
-  cmd = (struct execcmd*)ret;
+  cmd = (struct execcmd *)ret;
 
   argc = 0;
   ret = parseredirs(ret, ps, es);
-  while(!peek(ps, es, "|)&;")){
-    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+  while (!peek(ps, es, "|)&;"))
+  {
+    if ((tok = gettoken(ps, es, &q, &eq)) == 0)
       break;
-    if(tok != 'a')
+    if (tok != 'a')
       panic("syntax");
     cmd->argv[argc] = q;
     cmd->eargv[argc] = eq;
     argc++;
-    if(argc >= MAXARGS)
+    if (argc >= MAXARGS)
       panic("too many args");
     ret = parseredirs(ret, ps, es);
   }
@@ -446,7 +494,7 @@ parseexec(char **ps, char *es)
 }
 
 // NUL-terminate all the counted strings.
-struct cmd*
+struct cmd *
 nulterminate(struct cmd *cmd)
 {
   int i;
@@ -456,36 +504,37 @@ nulterminate(struct cmd *cmd)
   struct pipecmd *pcmd;
   struct redircmd *rcmd;
 
-  if(cmd == 0)
+  if (cmd == 0)
     return 0;
 
-  switch(cmd->type){
+  switch (cmd->type)
+  {
   case EXEC:
-    ecmd = (struct execcmd*)cmd;
-    for(i=0; ecmd->argv[i]; i++)
+    ecmd = (struct execcmd *)cmd;
+    for (i = 0; ecmd->argv[i]; i++)
       *ecmd->eargv[i] = 0;
     break;
 
   case REDIR:
-    rcmd = (struct redircmd*)cmd;
+    rcmd = (struct redircmd *)cmd;
     nulterminate(rcmd->cmd);
     *rcmd->efile = 0;
     break;
 
   case PIPE:
-    pcmd = (struct pipecmd*)cmd;
+    pcmd = (struct pipecmd *)cmd;
     nulterminate(pcmd->left);
     nulterminate(pcmd->right);
     break;
 
   case LIST:
-    lcmd = (struct listcmd*)cmd;
+    lcmd = (struct listcmd *)cmd;
     nulterminate(lcmd->left);
     nulterminate(lcmd->right);
     break;
 
   case BACK:
-    bcmd = (struct backcmd*)cmd;
+    bcmd = (struct backcmd *)cmd;
     nulterminate(bcmd->cmd);
     break;
   }
diff --git a/user/sh.c:Zone.Identifier b/user/sh.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/sh.d:Zone.Identifier b/user/sh.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/sh.o:Zone.Identifier b/user/sh.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/sh.sym:Zone.Identifier b/user/sh.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/stressfs.asm:Zone.Identifier b/user/stressfs.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/stressfs.c:Zone.Identifier b/user/stressfs.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/stressfs.d:Zone.Identifier b/user/stressfs.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/stressfs.o:Zone.Identifier b/user/stressfs.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/stressfs.sym:Zone.Identifier b/user/stressfs.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/test.asm:Zone.Identifier b/user/test.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/test.c b/user/test.c
new file mode 100644
index 0000000..1a20506
--- /dev/null
+++ b/user/test.c
@@ -0,0 +1,203 @@
+#include "kernel/types.h"
+#include "kernel/syscall.h"
+#include "user/user.h"
+#include "kernel/fcntl.h"
+
+
+struct perf
+{
+  /* data */
+  int ctime;
+  int ttime;
+  int stime;
+  int retime;
+  int rutime;
+  int avrage_bursttime;
+};
+
+
+void run_for(int ticks) {
+  int t0 = uptime();
+  while (uptime() - t0 < ticks) { }
+}
+
+void sleep1(char *s) {
+  printf("%s yielding\n", s);
+  sleep(1);
+}
+
+void print_performance(struct perf *perf) {
+  printf("creation time:    %d\n", perf->ctime);
+  printf("termination time: %d\n", perf->ttime);
+  printf("running time:     %d\n", perf->rutime);
+  printf("runnable time:    %d\n", perf->retime);
+  printf("sleeping time:    %d\n", perf->stime);
+  printf("burst time:       %d\n", perf->avrage_bursttime);
+}
+
+void print_wait_stat() {
+  int status;
+  struct perf perf;
+  int pid = wait_stat(&status, &perf);
+  printf("child %d exited with status %d\n", pid, status);
+  print_performance(&perf);
+}
+
+void test_wait_stat_task(void) {
+  int status;
+  int ccount = 20;
+
+  sleep(10);
+  for (int i = 0; i < ccount; i++) {
+    if (fork() == 0) {
+      run_for(2);
+      exit(0);
+    }
+  }
+  for (int i = 0; i < ccount; i++) {
+    wait(&status);
+  }
+  run_for(2);
+  printf("child (%d) exiting\n", getpid());
+  exit(7);
+}
+
+void srt_child0() {
+  printf("0 running\n");
+  run_for(4);
+  sleep1("0");
+  printf("0 running\n");
+  run_for(8);
+  sleep1("0");
+  printf("0 running\n");
+  run_for(7);
+  sleep1("0");
+}
+void srt_child1() {
+  printf("1 running\n");
+  run_for(6);
+  sleep1("1");
+}
+void srt_child2() {
+  printf("2 running\n");
+  run_for(6);
+  sleep1("2");
+  printf("2 running\n");
+  run_for(3);
+  sleep1("2");
+}
+void srt_child3() {
+  printf("3 running\n");
+  run_for(2);
+  sleep1("3");
+}
+void test_srt(void) {
+  void (*tasks[])(void) = {
+    &srt_child0,
+    &srt_child1,
+    &srt_child2,
+    &srt_child3,
+  };
+  int pids[sizeof(tasks)/sizeof(void*)];
+  struct perf perfs[sizeof(tasks)/sizeof(void*)];
+  int len = sizeof(tasks)/sizeof(void*);
+  for (int i = 0; i < len; i++) {
+    if ((pids[i] = fork()) == 0) {
+      tasks[i]();
+      exit(0);
+    }
+  }
+  for (int i = 0; i < len; i++) {
+    int status;
+    struct perf perf;
+    int pid = wait_stat(&status, &perf);
+    int j = pid - pids[0];
+    printf("i = %d exited\n", j);
+    perfs[j] = perf;
+  }
+  printf("\n");
+  for (int i = 0; i < len; i++) {
+    printf("i = %d, pid = %d\n", i, pids[i]);
+    print_performance(&perfs[i]);
+    printf("\n");
+  }
+
+  printf("SRT test stats:\n");
+}
+
+void test_bursttime(void) {
+  run_for(18);
+}
+
+void test_set_priority() {
+  #ifdef SCHED_CFSD
+  int pid = fork();
+  if (pid == 0) {
+    if (set_priority(6) >= 0) {
+      printf("set priority: call didn't fail on 6.\n");
+      exit(7);
+    }
+    for (int i = 5; i > 0; i--) {
+      if (set_priority(i) < 0) {
+        printf("set priority: call failed on %d.\n", i);
+        exit(i + 1);
+      }
+    }
+    if (set_priority(0) >= 0) {
+      printf("set priority: call didn't fail on 0.\n");
+      exit(1);
+    }
+    run_for(4);
+    sleep(2);
+    printf("child exiting...\n");
+    exit(0);
+  }
+  else {
+    wait(0);
+  }
+  #endif
+}
+
+void measure_performance(void (*child_task)(void)) {
+  int pid = fork();
+  if (pid == 0) {
+    child_task();
+    exit(0);
+  }
+  else {
+    print_wait_stat();
+  }
+}
+
+void test_uptime() {
+  int t0 = uptime();
+  sleep(100);
+  int t1 = uptime();
+  int dt = t1 - t0;
+  printf("%d, %d, %d\n", t0, t1, dt);
+}
+
+void test_trace() {
+  char *str = 0;
+  trace((1 << SYS_getpid) | (1 << SYS_fork) | (1 << SYS_sbrk), getpid());
+
+  if(fork() == 0){
+    trace((1 << SYS_sbrk | 1<< SYS_kill), getpid());
+    kill(90);
+    fprintf(2, "child process id: %d\n", getpid());
+    str = malloc(1024);
+  } else {
+    wait(0);
+    sbrk(1<<15);
+    fprintf(2, "parent process id: %d\n", getpid());
+    str = malloc(1024);
+    memcpy(str, "hello", 6);
+  }
+}
+
+void main(int argc, char *argv[]) {
+  // measure_performance(&test_srt);
+  // test_set_priority();
+  test_trace();
+  exit(0);
+}
diff --git a/user/test.c:Zone.Identifier b/user/test.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/test.d:Zone.Identifier b/user/test.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/test.o:Zone.Identifier b/user/test.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/test.sym:Zone.Identifier b/user/test.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/tests.asm:Zone.Identifier b/user/tests.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/tests.c b/user/tests.c
new file mode 100644
index 0000000..b1b343b
--- /dev/null
+++ b/user/tests.c
@@ -0,0 +1,31 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+enum procpriority {TESTHIGH, HIGH, NORMAL, LOW, TESTLOW};
+
+int
+main(int argc, char *argv[]){
+    int pid = fork();
+    if (pid ==0){    
+        // fprintf(2,"parent set priority and: %d\n",set_priority(LOW));
+        int j =0;
+        for (int i =0; i<1000; i++){
+            j++;
+            if (j%100 ==0){
+                fprintf(2,"child arrived to %d\n",j);
+            }
+        }
+    }
+    else {
+        fprintf(2,"parent set priority and: %d\n",set_priority(HIGH));  
+        int j =0;
+        for (int i =0; i<1000; i++){
+            j++;
+            if (j%100 ==0){
+                fprintf(2,"parent arrived to %d\n",j);
+            }
+        }
+        wait(0);
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/tests.c:Zone.Identifier b/user/tests.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/tests.d:Zone.Identifier b/user/tests.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/tests.o:Zone.Identifier b/user/tests.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/tests.sym:Zone.Identifier b/user/tests.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/trace.asm:Zone.Identifier b/user/trace.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..ecc0db3
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,20 @@
+#include "kernel/types.h"
+#include "user/user.h"
+#include "kernel/fcntl.h"
+
+int main(int argc, char** argv){
+    fprintf(2, "process: %d trace was called\n", getpid());
+    int pid = fork();
+    if ( pid > 0){ //parent
+        fprintf(2,"forked new process pid: %d\n", pid);
+        wait(&pid);
+    }
+    else { // child
+        trace(1 << 13 | 1<<6, getpid());
+        kill(-1);
+        kill(-2);
+        sleep(3);
+        exit(0);
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/trace.c:Zone.Identifier b/user/trace.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/trace.d:Zone.Identifier b/user/trace.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/trace.o:Zone.Identifier b/user/trace.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/trace.sym:Zone.Identifier b/user/trace.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/ulib.c:Zone.Identifier b/user/ulib.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/ulib.d:Zone.Identifier b/user/ulib.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/ulib.o:Zone.Identifier b/user/ulib.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/umalloc.c:Zone.Identifier b/user/umalloc.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/umalloc.d:Zone.Identifier b/user/umalloc.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/umalloc.o:Zone.Identifier b/user/umalloc.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/user.h b/user/user.h
index b71ecda..5146bf5 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct perf;
 
 // system calls
 int fork(void);
@@ -23,7 +24,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-
+int wait_stat(int *status , struct perf * performence);
+int set_priority(int priority);
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
@@ -40,3 +42,4 @@ void free(void*);
 int atoi(const char*);
 int memcmp(const void *, const void *, uint);
 void *memcpy(void *, const void *, uint);
+void trace(int mask,int pid);
\ No newline at end of file
diff --git a/user/user.h:Zone.Identifier b/user/user.h:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/usertests.asm:Zone.Identifier b/user/usertests.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/usertests.c:Zone.Identifier b/user/usertests.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/usertests.d:Zone.Identifier b/user/usertests.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/usertests.o:Zone.Identifier b/user/usertests.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/usertests.sym:Zone.Identifier b/user/usertests.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/usys.S:Zone.Identifier b/user/usys.S:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/usys.d:Zone.Identifier b/user/usys.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/usys.o:Zone.Identifier b/user/usys.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/usys.pl b/user/usys.pl
old mode 100755
new mode 100644
index 01e426e..d8fd581
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("wait_stat");
+entry("set_priority");
+entry("trace");
diff --git a/user/usys.pl:Zone.Identifier b/user/usys.pl:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/wc.asm:Zone.Identifier b/user/wc.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/wc.c:Zone.Identifier b/user/wc.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/wc.d:Zone.Identifier b/user/wc.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/wc.o:Zone.Identifier b/user/wc.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/wc.sym:Zone.Identifier b/user/wc.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/zombie.asm:Zone.Identifier b/user/zombie.asm:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/zombie.c:Zone.Identifier b/user/zombie.c:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/zombie.d:Zone.Identifier b/user/zombie.d:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/zombie.o:Zone.Identifier b/user/zombie.o:Zone.Identifier
new file mode 100644
index 0000000..e69de29
diff --git a/user/zombie.sym:Zone.Identifier b/user/zombie.sym:Zone.Identifier
new file mode 100644
index 0000000..e69de29
